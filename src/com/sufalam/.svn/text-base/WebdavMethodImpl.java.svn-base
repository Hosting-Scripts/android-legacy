package com.sufalam;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.InputStreamRequestEntity;
import org.apache.commons.httpclient.methods.RequestEntity;
import org.apache.jackrabbit.webdav.DavException;
import org.apache.jackrabbit.webdav.MultiStatus;
import org.apache.jackrabbit.webdav.client.methods.DeleteMethod;
import org.apache.jackrabbit.webdav.client.methods.MkColMethod;
import org.apache.jackrabbit.webdav.client.methods.PropFindMethod;
import org.apache.jackrabbit.webdav.client.methods.PutMethod;

import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import com.owncloud.activity.DashBoardActivity;
import com.owncloud.common.BaseActivity;

public class WebdavMethodImpl extends BaseActivity {

	public String deleteFileOrFolder(String url, String where, String whichFile, HttpClient httpClient) {
    	try {
//			DeleteMethod deletefile = new DeleteMethod(url + "/" + whichFile);
    		DeleteMethod deletefile = new DeleteMethod(url);
			httpClient.executeMethod(deletefile);
			String test = deletefile.getResponseBodyAsString();
			return test;
		} catch (IOException e) {
			e.printStackTrace();
			Log.i("DeleteFileOrFolder",e.toString());
			return null;
		}
    }
    
    public String createDir(String url, String whichFile, HttpClient httpClient) {
    	try {
			MkColMethod createdir = new MkColMethod(url + "/" + whichFile);
			httpClient.executeMethod(createdir);
			String test = createdir.getResponseBodyAsString();
			return test;
		} catch (IOException e) {
			e.printStackTrace();
			Log.i("Create dir : ",e.toString());
			return null;
		}
    }
    
//    public void findDir(HttpClient httpClient) {
//    	try {
//            String query = "//element(*, rep:root)";
//			SearchMethod search = new SearchMethod(
//					"http://owncloud-test.dev.hive01.com/owncloud/files/webdav.php",
//					query, "xpath");
//			httpClient.executeMethod(search);
//			MultiStatus resp;
//			try {
//				resp = search.getResponseBodyAsMultiStatus();
//				for (int i1=0; i1<=resp.getResponses().length-1; i1++) { 
//					String respString = resp.getResponses()[i1].getHref();
//			        Log.d("response", respString);
//				}
//			} catch (DavException e) {
//				e.printStackTrace();
//			} 
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//    }
    
    public String uploadFile(String url, String where, FileInputStream from, 
    		String fileName, HttpClient httpClient) {
    	PutMethod putMethod = new PutMethod(url + "/" + where + fileName);
        try {			
			RequestEntity re = new InputStreamRequestEntity(from);
			putMethod.setRequestEntity(re);
			httpClient.executeMethod(putMethod);
			String test = putMethod.getResponseBodyAsString();
	        return test;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (HttpException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
    }
    
    public MultiStatus listAll(String fromUrl, HttpClient httpClient) {
        try {
        	PropFindMethod find = new PropFindMethod(fromUrl);
			httpClient.executeMethod(find);
			MultiStatus resp = null;
			try {
				resp = find.getResponseBodyAsMultiStatus();
//				for (int i1=0; i1<=resp.getResponses().length-1; i1++) { 
//					String respString = resp.getResponses()[i1].getHref();
//			        Log.d("response", respString);
//				}
			} catch (DavException e) {
				e.printStackTrace();
			} 
			return resp;
		} catch (IOException e1) {
			e1.printStackTrace();
			return null;
		}
    }
    
    public boolean login(String fromUrl, HttpClient httpClient) {
    	if ((listAll(fromUrl, httpClient)) == null) {
    		return false;
    	} else {
    		return true;
    	}
    }
    
    public void downloadFile(String url) {
		GetMethod gm = new GetMethod(url);
		try {
			int status = httpClient.executeMethod(gm);
			if (status == HttpStatus.SC_OK) {
				InputStream input = gm.getResponseBodyAsStream();

				String fileName = new StringBuffer(url).reverse().toString();
				String[] fileNameArray = fileName.split("/");
				fileName = new StringBuffer(fileNameArray[0]).reverse()
						.toString();

				File folder = new File(
						Environment.getExternalStorageDirectory() + "/ownCloud");
				boolean success = false;
				if (!folder.exists()) {
					success = folder.mkdir();
				}
				if (!success) {
					// Do something on success
					File file = new File(Environment
							.getExternalStorageDirectory().toString()
							+ "/ownCloud/", fileName);
					OutputStream fOut = new FileOutputStream(file);

					int byteCount = 0;
					byte[] buffer = new byte[4096];
					int bytesRead = -1;

					while ((bytesRead = input.read(buffer)) != -1) {
						fOut.write(buffer, 0, bytesRead);
						byteCount += bytesRead;
					}

					fOut.flush();
					fOut.close();
				} else {
					// Do something else on failure
					Log.d("Download Prob..", String.valueOf(success)
							+ ", Some problem in folder creating");
				}

			}
		} catch (HttpException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
	
}
