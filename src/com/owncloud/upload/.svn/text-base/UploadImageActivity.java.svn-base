package com.owncloud.upload;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.text.SpannableString;
import android.text.style.UnderlineSpan;
import android.util.Log;
import android.view.Display;
import android.view.GestureDetector;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.Toast;

import com.owncloud.R;
import com.owncloud.activity.DashBoardActivity;
import com.owncloud.common.BaseActivity;

public class UploadImageActivity extends BaseActivity implements
		OnItemClickListener,OnClickListener {

	/**
	 * Grid view holding the images.
	 */
	private GridView sdcardImages;
	/**
	 * Image adapter for the grid view.
	 */
	private ImageAdapter imageAdapter;
	/**
	 * Display used for getting the width of the screen.
	 */
	private Display display;
	List<Uri> listUri = new ArrayList<Uri>();
	Button mCancel;
	Button mUpload;
//	Button mOwnCloud;
	Cursor Vcursor;
	int noOfImg = 0;
	
	
	int size;
	int min;
	int max;
	
	Bitmap bitmap = null;
	Bitmap newBitmap = null;
	Uri uri = null;

	Cursor cursor;
	int columnIndex;
	
	Button btnNext;
	
	GestureDetector gd;
	
	
//	ProgressBar mProgress;
	List<String> uploadFile = new ArrayList<String>();
	/**
	 * Creates the content view, sets up the grid, the adapter, and the click
	 * listener.
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// Request progress bar
		requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
		setContentView(R.layout.uploadimage);
		setTitle("SD Card Images");
		display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE))
				.getDefaultDisplay();
		
		mCancel = (Button) findViewById(R.id.cancel);
		mUpload = (Button) findViewById(R.id.upload);
		mOwnCloud = (Button)findViewById(R.id.BtnOwnCloud);
		
		btnNext = (Button)findViewById(R.id.btnNext);
		
		SpannableString content = new SpannableString("Load more images");
		content.setSpan(new UnderlineSpan(), 0, content.length(), 0);
		btnNext.setText(content);
		
		gd = new GestureDetector(getApplicationContext(),sogl);
		
		min = 15;
		max = 0;
		
		btnNext.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				min = min + 15;
				if(min > size) {
					min = size;
				}
				setProgressBarIndeterminateVisibility(true);
				new LoadImagesFromSDCard().execute();
//				loadImg();
			}
		});
		
		
		
		mCancel.setOnClickListener(this);
//		mUpload.setOnClickListener(this);
		mUpload.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (uploadFile.size() > 0) { 
					mUpload.setText("Uploading...");
					mUpload.setEnabled(false);
					mCancel.setEnabled(false);
					mOwnCloud.setEnabled(false);
					showDialog(1);
					t = new Thread() {
						public void run() {
//							showDialog(1);
//							Message toMain = handler.obtainMessage();
//							toMain.obj = "mUpload";
//							handler.sendMessage(toMain);
							
							Log.i("Total Files : ", String.valueOf(uploadFile.size()));

							if (uploadFile.size() > 0) {
								for (int i = 0; i < uploadFile.size(); i++) {

									try {
										final File file = new File(uploadFile.get(i));
//										final File file = new File(listUri.get(i).toString());
										Log.i("Current Uploading File :", uploadFile.get(i));
										Log.i("Current File :", file.getName());

										
										FileInputStream fis = null;
										String uploadResult = null;
										try {
											String fileName = file.getName().replace(" ", "");
											fis = new FileInputStream(file);
											uploadResult = uploadFile(fileLocation, "",
													fis, fileName,
													BaseActivity.httpClient);
											Log.i("Upload File==>","Loc :"+fileLocation+"File :" +file.getName());
										} catch (Exception e) {
											// TODO Auto-generated catch
											// block
											Log.i("Upload Exception :", e.toString());
											e.printStackTrace();
										}

										if (uploadResult == null) {
//											Toast.makeText(
//													UploadImageActivity.this,
//													"There is some problem while uploading file.",
//													1).show();
											runOnUiThread(new Runnable() {
												
												@Override
												public void run() {
													// TODO Auto-generated method stub
													Toast.makeText(
															UploadImageActivity.this,
															"There is some problem while uploading file.",
															1).show();
												}
											});
										} else {
//											Toast.makeText(UploadImageActivity.this,
//													"File uploaded successfully", 1)
//													.show();
//											Log.i("File Upload Msg",
//													"File uploaded successfully");
											runOnUiThread(new Runnable() {
												
												@Override
												public void run() {
													// TODO Auto-generated method stub
													Toast.makeText(UploadImageActivity.this,
															"File uploaded successfully", 1)
															.show();
													Log.i("File Upload Msg",
															"File uploaded successfully");
												}
											});
										}
										if (i == uploadFile.size() - 1) {
											UploadImageActivity.this.startActivity(new Intent(
													UploadImageActivity.this,
													DashBoardActivity.class).putExtra(
													"From", "FileExplorer").putExtra("newdir", "newDir"));
													finish();
										}

									} catch (Exception e) {
										// TODO Auto-generated catch
										// block
										Log.i("Invalid file format", e.toString());
										e.printStackTrace();
										runOnUiThread(new Runnable() {
											
											@Override
											public void run() {
												// TODO Auto-generated method stub
												Toast.makeText(UploadImageActivity.this,
														"Invalid file format", Toast.LENGTH_LONG)
														.show();
											}
										});
										
									}
								}

							} else {
//								Toast.makeText(UploadImageActivity.this,
//										"Please select file first", 1).show();
								runOnUiThread(new Runnable() {
									public void run() {
										Toast.makeText(UploadImageActivity.this,
												"Please select file first", 1).show();
									}
								});
//								removeDialog(1);
							}
							
							runOnUiThread(new Runnable() {
								
								@Override
								public void run() {
									// TODO Auto-generated method stub
									mUpload.setText("Upload");
									mUpload.setEnabled(true);
									mCancel.setEnabled(true);
									mOwnCloud.setEnabled(true);
								}
							});
//							mUpload.setText("Upload");
//							mUpload.setEnabled(true);
//							mCancel.setEnabled(true);
//							mOwnCloud.setEnabled(true);
							removeDialog(1);
							
						}
					};
					t.start(); 
				} else {
					Toast.makeText(UploadImageActivity.this,
							"Please select file first", 1).show();
				}
			}
		});
		mOwnCloud.setOnClickListener(this);
		if(!getIntent().getExtras().getString("fileLocation").equals("")){
			fileLocation=getIntent().getExtras().getString("fileLocation");
		}else{
			fileLocation = BaseActivity.url;
		}
		setupViews();
		setProgressBarIndeterminateVisibility(true);
		
		loadImages();
	}

	
	GestureDetector.SimpleOnGestureListener sogl = new GestureDetector.SimpleOnGestureListener() {
		  
		public boolean onDown(MotionEvent event) {
			
		      return true;
		}
		
		public boolean onFling(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			
				if (event1.getRawY() > event2.getRawY() && 
						StrictMath.abs(event1.getRawX()-event2.getRawX()) < 100) {
					min = min + 15;
					if(min > size) {
						min = size;
					}
					setProgressBarIndeterminateVisibility(true);
					new LoadImagesFromSDCard().execute();
				   
			   } else {
				   
			   }
			   return true;
		}
	};

	 @Override
		public boolean dispatchTouchEvent(MotionEvent e){
		    super.dispatchTouchEvent(e);
		    return gd.onTouchEvent(e);
		}
	
	/**
	 * Free up bitmap related resources.
	 */
	protected void onDestroy() {
		super.onDestroy();
		final GridView grid = sdcardImages;
		final int count = grid.getChildCount();
		ImageView v = null;
		for (int i = 0; i < count; i++) {
			v = (ImageView) grid.getChildAt(i);
			((BitmapDrawable) v.getDrawable()).setCallback(null);
		}
//		Vcursor.close();
	}

	/**
	 * Setup the grid view.
	 */
	private void setupViews() {
		sdcardImages = (GridView) findViewById(R.id.sdcard);
		// sdcardImages.setNumColumns(display.getWidth()/95);

		sdcardImages.setNumColumns(3);
		sdcardImages.setClipToPadding(false);
//		sdcardImages.setOnItemClickListener(UploadImageActivity.this);
		
		imageAdapter = new ImageAdapter(getApplicationContext());
		sdcardImages.setAdapter(imageAdapter);
	}

	/**
	 * Load images.
	 */
	private void loadImages() {
		final Object data = getLastNonConfigurationInstance();
		
		if (data == null) {
			
			showDialog(0);
			t = new Thread() {
				public void run() {
					Message toMain = handler.obtainMessage();
					toMain.obj = "mLoad";
					handler.sendMessage(toMain);
				}
			};
			t.start();
//			new LoadImagesFromSDCard().execute();
		} else {
			final LoadedImage[] photos = (LoadedImage[]) data;
			if (photos.length == 0) {
				showDialog(0);
				t = new Thread() {
					public void run() {
						Message toMain = handler.obtainMessage();
						toMain.obj = "mLoad";
						handler.sendMessage(toMain);
					}
				};
				t.start();
//				new LoadImagesFromSDCard().execute();
			}
			for (LoadedImage photo : photos) {
				addImage(photo);
			}
		}
		
	}

	/**
	 * Add image(s) to the grid view adapter.
	 * 
	 * @param value
	 *            Array of LoadedImages references
	 */
	private void addImage(LoadedImage... value) {
		for (LoadedImage image : value) {
			imageAdapter.addPhoto(image);
			imageAdapter.notifyDataSetChanged();
		}
	}

	/**
	 * Save bitmap images into a list and return that list.
	 * 
	 * @see android.app.Activity#onRetainNonConfigurationInstance()
	 */
	@Override
	public Object onRetainNonConfigurationInstance() {
		final GridView grid = sdcardImages;
		final int count = grid.getChildCount();
		final LoadedImage[] list = new LoadedImage[count];

		for (int i = 0; i < count; i++) {
			final ImageView v = (ImageView) grid.getChildAt(i);
			list[i] = new LoadedImage(
					((BitmapDrawable) v.getDrawable()).getBitmap());
		}

		return list;
	}

	/**
	 * Async task for loading the images from the SD card.
	 * 
	 * @author Mihai Fonoage
	 * 
	 */
	class LoadImagesFromSDCard extends AsyncTask<Object, LoadedImage, Object> {

		/**
		 * Load images from SD Card in the background, and display each image on
		 * the screen.
		 * 
		 * @see android.os.AsyncTask#doInBackground(Params[])
		 */
		@Override
		protected Object doInBackground(Object... params) {
			// setProgressBarIndeterminateVisibility(true);
//			mCancel.setClickable(false);
//			mUpload.setClickable(false);
			
//			runOnUiThread(new Runnable() {
//				public void run() {
					
			runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					mCancel.setEnabled(false);
					mUpload.setEnabled(false);
					mOwnCloud.setEnabled(false);
					btnNext.setEnabled(false);
				}
			});
					try {
//						Bitmap bitmap = null;
//						Bitmap newBitmap = null;
//						Uri uri = null;

						// Set up an array of the Thumbnail Image ID column we
						// want
						String[] projection = { MediaStore.Images.Thumbnails._ID };
						// Create the cursor pointing to the SDCard
//						Cursor cursor = managedQuery(
//								MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
//								projection, null, null, null);
						
						cursor = managedQuery(
								MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
								projection, null, null, null);
						
						Log.i("Image Count ", String.valueOf(cursor.getCount()));

//						int columnIndex = cursor
//								.getColumnIndexOrThrow(MediaStore.Images.Thumbnails._ID);
						
						columnIndex = cursor
						.getColumnIndexOrThrow(MediaStore.Images.Thumbnails._ID);
						
//						int size = cursor.getCount();
						size = cursor.getCount();
						Log.i("Size", String.valueOf(size));
						
//						if (size > 15) {
//							runOnUiThread(new Runnable() {
//								@Override
//								public void run() {
//									btnNext.setVisibility(View.VISIBLE);
//								}
//							});
//						}
						
						// If size is 0, there are no images on the SD Card.
//						int imageID = 0;
//						for (int i = 0; i < size; i++) {
//							cursor.moveToPosition(i);
//							imageID = cursor.getInt(columnIndex);
//							uri = Uri
//									.withAppendedPath(
//											MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
//											"" + imageID);
//
//							// listUri.add(uri);
//							Log.d("ListUri",
//									"========Image======" + uri.toString());
//							try {
//								bitmap = BitmapFactory
//										.decodeStream(getContentResolver()
//												.openInputStream(uri));
//								if (bitmap != null) {
//									newBitmap = Bitmap.createScaledBitmap(
//											bitmap, 70, 70, true);
//									bitmap.recycle();
//									if (newBitmap != null) {
//										publishProgress(new LoadedImage(
//												newBitmap));
//										listUri.add(uri);
//									}
//								}
//							} catch (IOException e) {
//								// Error fetching image, try to recover
//								Log.i("Load Image ===>", e.toString());
//							}
//						}
						
						loadImg();
						
						// ============================
//						noOfImg = listUri.size();
//
//						String[] vProjection = {
//								MediaStore.Video.Thumbnails._ID,
//								MediaStore.Video.Media.DATA };
//						Vcursor = managedQuery(
//								MediaStore.Video.Media.EXTERNAL_CONTENT_URI,
//								vProjection, null, null, null);
//						Log.i("Video Image Count ",
//								String.valueOf(Vcursor.getCount()));
//						int videoColumnIndex = Vcursor
//								.getColumnIndexOrThrow(MediaStore.Video.Thumbnails._ID);
//						int videoSize = Vcursor.getCount();
//						int videoImageId = 0;
//						for (int i = 0; i < videoSize; i++) {
//							Vcursor.moveToPosition(i);
//							videoImageId = Vcursor.getInt(videoColumnIndex);
//							uri = Uri
//									.withAppendedPath(
//											MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI,
//											"" + videoImageId);
//							// listUri.add(uri);
//							Log.i("ListUri",
//									"========Video======" + uri.toString());
//
//							try {
//								bitmap = BitmapFactory
//										.decodeStream(getContentResolver()
//												.openInputStream(uri));
//								if (bitmap != null) {
//									newBitmap = Bitmap.createScaledBitmap(
//											bitmap, 70, 70, true);
//									bitmap.recycle();
//									if (newBitmap != null) {
//										publishProgress(new LoadedImage(
//												newBitmap));
//										listUri.add(uri);
//									}
//								}
//							} catch (IOException e) {
//								// Error fetching image, try to recover
//								Log.i("VideoLoad Image ===>", e.toString());
//
//							}
//						}
//						// ============================
//						Log.i("listUri Size",
//								"=========>" + String.valueOf(listUri.size()));
//						cursor.close();

					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						Log.e("doInBackground", e.toString());
						finish();
					}
//				}
//			});

			return null;
		}

		/**
		 * Add a new LoadedImage in the images grid.
		 * 
		 * @param value
		 *            The image.
		 */
		@Override
		public void onProgressUpdate(LoadedImage... value) {
			addImage(value);
		}

		/**
		 * Set the visibility of the progress bar to false.
		 * 
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(Object result) {
			setProgressBarIndeterminateVisibility(false);
//			mCancel.setClickable(true);
//			mUpload.setClickable(true);
			mCancel.setEnabled(true);
			mUpload.setEnabled(true);
			mOwnCloud.setEnabled(true);
			btnNext.setEnabled(true);
			removeDialog(0);
		}
		
		public void loadImg() {
			int imageID = 0;
			for (int i = 0; i < min; i++) {
				cursor.moveToPosition(max);
				try {
					imageID = cursor.getInt(columnIndex);
					Log.d("imageId", String.valueOf(imageID));
					uri = Uri
					.withAppendedPath(
							MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
							"" + imageID);
					
					max++;
					
					if(max==size) {
						runOnUiThread(new Runnable() {
							@Override
							public void run() {
								btnNext.setVisibility(View.GONE);
							}
						});
					}
					
					// listUri.add(uri);
					Log.d("ListUri",
							"========Image======" + uri.toString());
					try {
						bitmap = BitmapFactory
								.decodeStream(getContentResolver()
										.openInputStream(uri));
						if (bitmap != null) {
							newBitmap = Bitmap.createScaledBitmap(
									bitmap, 70, 70, true);
							bitmap.recycle();
							if (newBitmap != null) {
								Log.d("Before publish", "Nihar Test --> Before Publish");
								publishProgress(new LoadedImage(
										newBitmap));
								Log.d("After publish", "Nihar Test --> After Publish and before listing");
								listUri.add(uri);
							}
						}
					} catch (IOException e) {
						// Error fetching image, try to recover
						Log.i("Bitmap Image Prob ===>", e.toString());
					}
					
				} catch(Exception e) {
					Log.i("Load Image Prob ===>", e.toString());
				}
				
			}
		}
		
	}

	/**
	 * Adapter for our image files.
	 * 
	 * @author Mihai Fonoage
	 * 
	 */
	class ImageAdapter extends BaseAdapter {

		private Context mContext;
		private ArrayList<LoadedImage> photos = new ArrayList<LoadedImage>();
		String selectedFilePath = "";
		String pos = "";

		public ImageAdapter(Context context) {
			mContext = context;
		}

		public void addPhoto(LoadedImage photo) {
			photos.add(photo);
		}

		public int getCount() {
			return photos.size();
		}

		public Object getItem(int position) {
			return photos.get(position);
		}

		public long getItemId(int position) {
			return position;
		}

		public View getView(final int position, View convertView, ViewGroup parent) {
			final ImageView imageView;
//			if (convertView == null) {
				imageView = new ImageView(mContext);
//			} else {
//				imageView = (ImageView) convertView;
//			}
			imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
			imageView.setPadding(1, 1, 1, 1);
			imageView.setBackgroundColor(Color.WHITE);
			imageView.setImageBitmap(photos.get(position).getBitmap());
			
			imageView.setOnClickListener(new OnClickListener() {
				
				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					try {
						Log.i("Position", "===>" + String.valueOf(position));
						Log.i("ListUri", "====>" + listUri.get(position));
						/*Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver()
								.openInputStream(listUri.get(position + 1)));
						if (bitmap != null) {
							Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap,
									parent.getWidth(), parent.getHeight(), true);
							bitmap.recycle();
							if (newBitmap != null) {
								ImageView img = (ImageView) findViewById(R.id.img);
								img.setVisibility(View.VISIBLE);
								sdcardImages.setVisibility(View.GONE);
								img.setImageBitmap(newBitmap);
							}
						}*/
						
						
						if(!listUri.get(position).toString().contains("video")){
							selectedFilePath = getRealPathFromURI(listUri.get(position));
						}else{
							int video_column_index = Vcursor
							.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
							Vcursor.moveToPosition((position) - noOfImg);
//							Vcursor.moveToPosition(1);
							selectedFilePath= Vcursor.getString(video_column_index);
						}

//						ImageView imageView = (ImageView) v;
						if (uploadFile.contains(selectedFilePath)) {
							uploadFile.remove(selectedFilePath);
							Log.i("Image Remove", "==========>" + selectedFilePath);
							imageView.setAlpha(255);
							String[] delPos = pos.split(String.valueOf(position));
//							Log.d("Nihar delPos", String.valueOf(delPos.length));
//							Log.d("Nihar delPos Value", delPos[0]);
							if(delPos == null) {
								pos = "";
							} else if (delPos.length == 0) {
								pos = "";
							} else if (delPos.length == 1){
								try {
									if (delPos[0].startsWith(",")) {
										pos = delPos[0].substring(1,delPos[0].length());
									} else {
										pos = delPos[0].substring(0,delPos[0].length()-1);
									}
								} catch (Exception e) {
									Log.d("nihar error", e.toString());
								}
							} else if (delPos.length == 2) {
								pos = delPos[0].substring(0,delPos[0].length()-1) + "" + delPos[1];
							}
//							if (pos.equals("")) {
//								pos = String.valueOf(position);
//							} else {
//								pos = pos + "," + String.valueOf(position);
//							}
						} else {
							uploadFile.add(selectedFilePath);
							Log.i("Image Add", "==========>" + selectedFilePath);
							imageView.setAlpha(100);
							if (pos.equals("")) {
								pos = String.valueOf(position);
							} else {
								pos = pos + "," + String.valueOf(position);
							}
						}
						
					} catch (Exception e) {
						// Error fetching image, try to recover
						Log.e("View Image Exception===>", e.toString());
						pos = "";

					}
				}
			});
			
			String[] allPos = pos.split(",");
			
			try {
				for(int i=0; i<allPos.length;i++) {
					if (allPos[i].equals(String.valueOf(position))) {
//						uploadFile.add(selectedFilePath);
//						Log.i("Image Add", "==========>" + selectedFilePath);
						imageView.setAlpha(100);
					}
				}
			} catch(Exception e) {
				
			}
			
			
			return imageView;
		}
	}

	/**
	 * A LoadedImage contains the Bitmap loaded for the image.
	 */
	private static class LoadedImage {
		Bitmap mBitmap;

		LoadedImage(Bitmap bitmap) {
			mBitmap = bitmap;
		}

		public Bitmap getBitmap() {
			return mBitmap;
		}
	}

	/**
	 * When an image is clicked, load that image as a puzzle.
	 */
	public void onItemClick(AdapterView<?> parent, View v, int position, long id) {

//		try {
//			Log.i("Position", "===>" + String.valueOf(position));
//			Log.i("ListUri", "====>" + listUri.get(position));
//			/*Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver()
//					.openInputStream(listUri.get(position + 1)));
//			if (bitmap != null) {
//				Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap,
//						parent.getWidth(), parent.getHeight(), true);
//				bitmap.recycle();
//				if (newBitmap != null) {
//					ImageView img = (ImageView) findViewById(R.id.img);
//					img.setVisibility(View.VISIBLE);
//					sdcardImages.setVisibility(View.GONE);
//					img.setImageBitmap(newBitmap);
//				}
//			}*/
//			String selectedFilePath = "";
//			if(!listUri.get(position).toString().contains("video")){
//				selectedFilePath = getRealPathFromURI(listUri.get(position));
//			}else{
//				int video_column_index = Vcursor
//				.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
//				Vcursor.moveToPosition((position) - noOfImg);
////				Vcursor.moveToPosition(1);
//				selectedFilePath= Vcursor.getString(video_column_index);
//			}
//
//			ImageView imageView = (ImageView) v;
//			if (uploadFile.contains(selectedFilePath)) {
//				uploadFile.remove(selectedFilePath);
//				Log.i("Image Remove", "==========>" + selectedFilePath);
//				imageView.setAlpha(255);
//			} else {
//				uploadFile.add(selectedFilePath);
//				Log.i("Image Add", "==========>" + selectedFilePath);
//				imageView.setAlpha(100);
//			}
//
//			
//		} catch (Exception e) {
//			// Error fetching image, try to recover
//			Log.e("View Image Exception===>", e.toString());
//
//		}
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		if (v == mCancel) {
			showDialog(0);
			t = new Thread() {
				public void run() {
					Message toMain = handler.obtainMessage();
					toMain.obj = "mCancel";
					handler.sendMessage(toMain);
				}
			};
			t.start();
		} else if (v == mUpload) {
//			showDialog(1);
			if (uploadFile.size() > 0) { 
//				Toast.makeText(getApplicationContext(), "tst", 1).show();
			showDialog(1);
			t = new Thread() {
				public void run() {
					Message toMain = handler.obtainMessage();
					toMain.obj = "mUpload";
					handler.sendMessage(toMain);
				}
			};
			t.start(); 
			} else {
//				removeDialog(1);
				Toast.makeText(UploadImageActivity.this,
						"Please select file first", 1).show();
			}
		}else if(v==mOwnCloud){
			showDialog(0);
			t=new Thread(){
				public void run(){
					Message toMain = handler.obtainMessage();
					toMain.obj="mOwnCloud";
					handler.sendMessage(toMain);
				}
			};
			t.start();
		}
	}
	private Handler handler = new Handler() {

		public void handleMessage(Message msg) {
			super.handleMessage(msg);
//			mProgress.setVisibility(ProgressBar.VISIBLE);
			if (msg.obj.toString().contentEquals("mCancel")) {

				startActivity(new Intent(getApplicationContext(),
						DashBoardActivity.class).putExtra("From",
						"FileExplorer").putExtra("newdir", "newDir"));
				finish();
				removeDialog(0);
			} else if (msg.obj.toString().contentEquals("mLoad")) {
				new LoadImagesFromSDCard().execute();
				removeDialog(0);
			}
			else if (msg.obj.toString().contentEquals("mUpload")) {
//				showDialog(1);
				Log.i("Total Files : ", String.valueOf(uploadFile.size()));

				if (uploadFile.size() > 0) {
					for (int i = 0; i < uploadFile.size(); i++) {

						try {
							final File file = new File(uploadFile.get(i));
//							final File file = new File(listUri.get(i).toString());
							Log.i("Current Uploading File :", uploadFile.get(i));

							
							FileInputStream fis = null;
							String uploadResult = null;
							try {
								String fileName = file.getName().replace(" ", "");
								fis = new FileInputStream(file);
								uploadResult = uploadFile(fileLocation, "",
										fis, fileName,
										BaseActivity.httpClient);
								Log.i("Upload File==>","Loc :"+fileLocation+"File :" +file.getName());
							} catch (Exception e) {
								// TODO Auto-generated catch
								// block
								Log.i("Upload Exception :", e.toString());
								e.printStackTrace();
							}

							if (uploadResult == null) {
								Toast.makeText(
										UploadImageActivity.this,
										"There is some problem while uploading file.",
										1).show();
							} else {
								Toast.makeText(UploadImageActivity.this,
										"File uploaded successfully", 1)
										.show();
								Log.i("File Upload Msg",
										"File uploaded successfully");
							}
							if (i == uploadFile.size() - 1) {
								UploadImageActivity.this.startActivity(new Intent(
										UploadImageActivity.this,
										DashBoardActivity.class).putExtra(
										"From", "FileExplorer").putExtra("newdir", "newDir"));
										finish();
							}

						} catch (Exception e) {
							// TODO Auto-generated catch
							// block
							Log.i("Invalid file format", e.toString());
							e.printStackTrace();
							Toast.makeText(UploadImageActivity.this,
									"Invalid file format", Toast.LENGTH_LONG)
									.show();
						}
					}

				} else {
					Toast.makeText(UploadImageActivity.this,
							"Please select file first", 1).show();
//					removeDialog(1);
				}
				mUpload.setText("Upload");
				mUpload.setEnabled(true);
				mCancel.setEnabled(true);
				mOwnCloud.setEnabled(true);
				removeDialog(1);
			}else if(msg.obj.toString().contentEquals("mOwnCloud")){
				
				startActivity(new Intent(getApplicationContext(),ChooseUploadLocation.class).putExtra("Url", mainUrl));
//				finish();
				removeDialog(0);
			}
	
		}
	};

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {

			if (mCancel.isEnabled()) {
				showDialog(0);
				t = new Thread() {
					public void run() {
						Message toMain = handler.obtainMessage();
						toMain.obj = "mCancel";
						handler.sendMessage(toMain);
					}
				};
				t.start();
			} else {
				
			}
			return true;
		}

		return super.onKeyDown(keyCode, event);
	}
	
	public void LoadImagesFromCard() {

		
		mCancel.setEnabled(false);
		mUpload.setEnabled(false);
		mOwnCloud.setEnabled(false);
		try {
			Bitmap bitmap = null;
			Bitmap newBitmap = null;
			Uri uri = null;

			// Set up an array of the Thumbnail Image ID column we
			// want
			String[] projection = { MediaStore.Images.Thumbnails._ID };
			// Create the cursor pointing to the SDCard
			Cursor cursor = managedQuery(
					MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
					projection, null, null, null);
			Log.i("Image Count ", String.valueOf(cursor.getCount()));

			int columnIndex = cursor
					.getColumnIndexOrThrow(MediaStore.Images.Thumbnails._ID);
			int size = cursor.getCount();
			Log.i("Size", String.valueOf(size));
			// If size is 0, there are no images on the SD Card.
			int imageID = 0;
			for (int i = 0; i < size; i++) {
				cursor.moveToPosition(i);
				imageID = cursor.getInt(columnIndex);
				uri = Uri
						.withAppendedPath(
								MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
								"" + imageID);

				// listUri.add(uri);
				Log.d("ListUri",
						"========Image======" + uri.toString());
				try {
					bitmap = BitmapFactory
							.decodeStream(getContentResolver()
									.openInputStream(uri));
					if (bitmap != null) {
						newBitmap = Bitmap.createScaledBitmap(
								bitmap, 70, 70, true);
						bitmap.recycle();
						if (newBitmap != null) {
//							publishProgress(new LoadedImage(
//									newBitmap));
							listUri.add(uri);
						}
					}
				} catch (IOException e) {
					// Error fetching image, try to recover
					Log.i("Load Image ===>", e.toString());
				}
			}
			// ============================
			noOfImg = listUri.size();

			String[] vProjection = {
					MediaStore.Video.Thumbnails._ID,
					MediaStore.Video.Media.DATA };
			Vcursor = managedQuery(
					MediaStore.Video.Media.EXTERNAL_CONTENT_URI,
					vProjection, null, null, null);
			Log.i("Video Image Count ",
					String.valueOf(Vcursor.getCount()));
			int videoColumnIndex = Vcursor
					.getColumnIndexOrThrow(MediaStore.Video.Thumbnails._ID);
			int videoSize = Vcursor.getCount();
			int videoImageId = 0;
			for (int i = 0; i < videoSize; i++) {
				Vcursor.moveToPosition(i);
				videoImageId = Vcursor.getInt(videoColumnIndex);
				uri = Uri
						.withAppendedPath(
								MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI,
								"" + videoImageId);
				// listUri.add(uri);
				Log.i("ListUri",
						"========Video======" + uri.toString());

				try {
					bitmap = BitmapFactory
							.decodeStream(getContentResolver()
									.openInputStream(uri));
					if (bitmap != null) {
						newBitmap = Bitmap.createScaledBitmap(
								bitmap, 70, 70, true);
						bitmap.recycle();
						if (newBitmap != null) {
//							publishProgress(new LoadedImage(
//									newBitmap));
							listUri.add(uri);
						}
					}
				} catch (IOException e) {
					// Error fetching image, try to recover
					Log.i("VideoLoad Image ===>", e.toString());

				}
			}
			// ============================
			Log.i("listUri Size",
					"=========>" + String.valueOf(listUri.size()));
			cursor.close();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			Log.e("doInBackground", e.toString());
			finish();
		}
	
	}
	
}
