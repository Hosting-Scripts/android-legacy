package com.owncloud.upload;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.provider.MediaStore;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;

import com.owncloud.R;

public class SDCardVideoImage extends Activity {

	/**
	 * Cursor used to access the results from querying for images on the SD
	 * card.
	 */
	private Cursor cursor;
	/*
	 * Column index for the Thumbnails Image IDs.
	 */
	private int columnIndex;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		// Set up an array of the Thumbnail Image ID column we want
		String[] projection = { MediaStore.Video.Thumbnails._ID };
		// Create the cursor pointing to the SDCard
		cursor = managedQuery(MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI,
				projection, // Which
							// columns
							// to
							// return
				null, // Return all rows
				null, null);
		// Get the column index of the Thumbnails Image ID
		columnIndex = cursor
				.getColumnIndexOrThrow(MediaStore.Video.Thumbnails._ID);

		GridView sdcardImages = (GridView) findViewById(R.id.sdcard);
		sdcardImages.setAdapter(new ImageAdapter(this));

		// Set up a click listener
		/*
		 * sdcardImages.setOnItemClickListener(new OnItemClickListener() {
		 * public void onItemClick(AdapterView parent, View v, int position,
		 * long id) { // Get the data location of the image String[] projection
		 * = { MediaStore.Images.Media.DATA }; cursor = managedQuery(
		 * MediaStore.Video.Thumbnails.EXTERNAL_CONTENT_URI, projection, //
		 * Which columns to return null, // Return all rows null, null);
		 * columnIndex = cursor
		 * .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
		 * cursor.moveToPosition(position); // Get image filename String
		 * imagePath = cursor.getString(columnIndex); // Use this path to do
		 * further processing, i.e. full screen // display } });
		 */
	}

	private class ImageAdapter extends BaseAdapter {

		private Context context;

		public ImageAdapter(Context localContext) {
			context = localContext;
		}

		public int getCount() {
			return cursor.getCount();
		}

		public Object getItem(int position) {
			return position;
		}

		public long getItemId(int position) {
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			ImageView picturesView;
			if (convertView == null) {
				picturesView = new ImageView(context);
				
				cursor.moveToPosition(position);
				
				int imageID = cursor.getInt(columnIndex);

				ContentResolver crThumb = getContentResolver();
				BitmapFactory.Options options = new BitmapFactory.Options();
				options.inSampleSize = 1;
				Bitmap curThumb = MediaStore.Video.Thumbnails.getThumbnail(
						crThumb, imageID,
						MediaStore.Video.Thumbnails.MICRO_KIND, options);
				picturesView.setImageBitmap(curThumb);
				picturesView.setPadding(1, 1, 1, 1);
//				picturesView.setBackgroundColor(Color.WHITE);
//				picturesView
//						.setLayoutParams(new GridView.LayoutParams(100, 100));
			} else {
				picturesView = (ImageView) convertView;
			}
			return picturesView;
		}
	}

}
